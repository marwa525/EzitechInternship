# -*- coding: utf-8 -*-
"""HeartDiseasePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Th1xgZUJLJWNgTogxaQFI3pA8WMjXLxw

# Heart Disease Prediction
"""

# Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
df = pd.read_csv('/content/heart.csv')

# Display the first few rows of the dataset
print(df.head())

# Print out the column names
print(df.columns)

"""ETL (Extract, Transform, Load)

"""

# Checking for missing values
missing_values = df.isnull().sum()
print(missing_values)


# Convert categorical variables to numeric
# Mapping example for 'Sex' and 'ExerciseAngina'
df['Sex'] = df['Sex'].map({'M': 1, 'F': 0})
df['ExerciseAngina'] = df['ExerciseAngina'].map({'Y': 1, 'N': 0})

# If there are other categorical variables, use one-hot encoding
df = pd.get_dummies(df, columns=['ChestPainType', 'RestingECG', 'ST_Slope'])

# Remove duplicates
df.drop_duplicates(inplace=True)

# Display the cleaned dataset
print(df.head())

"""EDA (Exploratory Data Analysis)

"""

# Checking for missing values
missing_values = df.isnull().sum()
print(missing_values)

# Fill or drop missing values if necessary
# Example: df.fillna(method='ffill', inplace=True)

# Convert categorical variables to numeric if necessary
# Example: df['Sex'] = df['Sex'].map({'M': 1, 'F': 0})

# Remove duplicates
df.drop_duplicates(inplace=True)

# Display the cleaned dataset
df.head()

# Summary statistics
print(df.describe())

# Distribution of target variable
sns.countplot(x='HeartDisease', data=df)
plt.title('Distribution of Heart Disease')
plt.xlabel('Heart Disease (1 = Yes, 0 = No)')
plt.ylabel('Count')
plt.show()

# Correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(df.corr(), annot=True, fmt='.2f', cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Pairplot
sns.pairplot(df, hue='HeartDisease')
plt.show()

# Feature selection
X = df.drop(columns='HeartDisease')
y = df['HeartDisease']

# Split the data into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Import necessary libraries for model building
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Initialize and train the model
model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

# Display results
print(f'Accuracy: {accuracy:.2f}')
print('Confusion Matrix:')
print(conf_matrix)
print('Classification Report:')
print(class_report)
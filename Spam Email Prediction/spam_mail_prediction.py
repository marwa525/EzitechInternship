# -*- coding: utf-8 -*-
"""Spam Mail Prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q5rC866TqNVkXS-y-9ZqVtx5OhnxacSd

Importing the Dependancies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Preprocessing"""

# load the data from the csv file into pandas Dataframe
raw_mail_data = pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

# replace the null values with null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

# printing the first 5 rows of the dataframe
mail_data.head()

# checking the numbers of rows and colums in the data
mail_data.shape

"""Label Encoding

"""

# label  spam mail as 0; and ham mail as 1;
mail_data.loc[mail_data['Category'] == 'spam', 'category' ,] = 0
mail_data.loc[mail_data['Category'] == 'ham', 'category' ,] = 1

"""spam - 0
ham - 1

"""

# separating the data as text and label
X = mail_data['Message']
Y = mail_data['Category']

print(X)

print(Y)

"""Spliting the data into train and test data"""

X_train , X_test, Y_train , Y_test = train_test_split(X,Y,test_size=0.2,random_state=3)

print(X.shape)

print(X_train.shape)
print(X_test.shape)

print(Y.shape)

"""Feature Extraction"""

#transform the text data into feature vectors that can be used as the input to the logistic regression
feature_extraction = TfidfVectorizer(min_df=1,stop_words='english',lowercase=True)

X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.fit_transform(X_test)

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
Y_train_encoded = label_encoder.fit_transform(Y_train)
Y_test_encoded = label_encoder.transform(Y_test)

# convert Y_train and X_test values into integers
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train)

print(X_train_features)

"""Training the Model
Logistic Regression

"""

model = LogisticRegression()

#training the logistic regression model with training data
model.fit(X_train_features,Y_train)

"""Evaluating the trained model

"""

#prediction on training data
prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train, prediction_on_training_data)

print('Accuracy on training data',accuracy_on_training_data)

feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)
X_combined = pd.concat([X_train, X_test])  # Combine training and test data
X_combined_features = feature_extraction.fit_transform(X_combined)

# Split the combined feature vectors back into training and test data
X_train_features = X_combined_features[:len(X_train)]
X_test_features = X_combined_features[len(X_train):]

# Train your logistic regression model on X_train_features and Y_train
model = LogisticRegression()
model.fit(X_train_features, Y_train)

# Prediction on test data
prediction_on_test_data = model.predict(X_test_features)
accuracy_on_test_data = accuracy_score(Y_test, prediction_on_test_data)

print(accuracy_on_test_data)

"""Buliding a Predictive System

"""

input_mail = ['U dun say so early hor... U c already then say...']

# convert text into feature vectors
input_data_features = feature_extraction.transform(input_mail)

#making Prediction
prediction = model.predict(input_data_features)
print(prediction)